#!/usr/bin/env node

import dotenv from 'dotenv';
import sql from 'mssql';
import { DefaultAzureCredential, ClientSecretCredential } from '@azure/identity';

// Environment variables y√ºkle
dotenv.config();

class NewFeaturesTest {
    constructor() {
        this.config = {
            server: process.env.AZURE_SQL_SERVER,
            database: process.env.AZURE_SQL_DATABASE,
            authentication: {
                type: 'azure-active-directory-access-token'
            },
            options: {
                encrypt: true,
                trustServerCertificate: false,
                connectTimeout: 30000,
                requestTimeout: 30000
            }
        };
    }

    async getAccessToken() {
        try {
            let credential;

            if (process.env.AZURE_CLIENT_ID && process.env.AZURE_CLIENT_SECRET && process.env.AZURE_TENANT_ID) {
                console.log('üîë Service Principal authentication kullanƒ±lƒ±yor...');
                credential = new ClientSecretCredential(
                    process.env.AZURE_TENANT_ID,
                    process.env.AZURE_CLIENT_ID,
                    process.env.AZURE_CLIENT_SECRET
                );
            } else {
                console.log('üîë Default Azure Credential kullanƒ±lƒ±yor...');
                credential = new DefaultAzureCredential();
            }

            const tokenResponse = await credential.getToken('https://database.windows.net/.default');
            return tokenResponse.token;
        } catch (error) {
            console.error('‚ùå Token alma hatasƒ±:', error.message);
            throw error;
        }
    }

    async testNewFeatures() {
        console.log('üöÄ Azure SQL MCP Server yeni √∂zellikler testi ba≈ülƒ±yor...\n');

        // Environment variables kontrol√º
        const requiredVars = ['AZURE_SQL_SERVER', 'AZURE_SQL_DATABASE'];
        const missingVars = requiredVars.filter(varName => !process.env[varName]);

        if (missingVars.length > 0) {
            console.error(`‚ùå Eksik environment variables: ${missingVars.join(', ')}`);
            return false;
        }

        console.log(`üìä Server: ${process.env.AZURE_SQL_SERVER}`);
        console.log(`üìä Database: ${process.env.AZURE_SQL_DATABASE}\n`);

        let pool = null;

        try {
            // Access token al
            console.log('üîÑ Access token alƒ±nƒ±yor...');
            const accessToken = await this.getAccessToken();
            console.log('‚úÖ Access token ba≈üarƒ±yla alƒ±ndƒ±\n');

            // Connection config'i g√ºncelle
            this.config.authentication.options = {
                token: accessToken
            };

            // Baƒülantƒ±yƒ± test et
            console.log('üîÑ Azure SQL\'e baƒülanƒ±yor...');
            pool = new sql.ConnectionPool(this.config);
            await pool.connect();
            console.log('‚úÖ Baƒülantƒ± ba≈üarƒ±lƒ±!\n');

            // Test tablosu olu≈ütur
            console.log('üîÑ Test tablosu olu≈üturuluyor...');
            await this.createTestTable(pool);
            console.log('‚úÖ Test tablosu olu≈üturuldu\n');

            // Test g√∂r√ºn√ºm√º olu≈ütur
            console.log('üîÑ Test g√∂r√ºn√ºm√º olu≈üturuluyor...');
            await this.testCreateView(pool);
            console.log('‚úÖ Test g√∂r√ºn√ºm√º olu≈üturuldu\n');

            // G√∂r√ºn√ºmleri listele
            console.log('üîÑ G√∂r√ºn√ºmler listeleniyor...');
            await this.testListViews(pool);
            console.log('‚úÖ G√∂r√ºn√ºmler listelendi\n');

            // Test saklƒ± yordamƒ± olu≈ütur
            console.log('üîÑ Test saklƒ± yordamƒ± olu≈üturuluyor...');
            await this.testCreateStoredProcedure(pool);
            console.log('‚úÖ Test saklƒ± yordamƒ± olu≈üturuldu\n');

            // Saklƒ± yordamlarƒ± listele
            console.log('üîÑ Saklƒ± yordamlar listeleniyor...');
            await this.testListStoredProcedures(pool);
            console.log('‚úÖ Saklƒ± yordamlar listelendi\n');

            // Temizlik
            console.log('üîÑ Test nesneleri temizleniyor...');
            await this.cleanup(pool);
            console.log('‚úÖ Temizlik tamamlandƒ±\n');

            console.log('üéâ T√ºm yeni √∂zellik testleri ba≈üarƒ±lƒ±!');
            return true;

        } catch (error) {
            console.error(`‚ùå Test hatasƒ±: ${error.message}`);
            if (error.code) {
                console.error(`‚ùå Error Code: ${error.code}`);
            }
            return false;
        } finally {
            if (pool) {
                try {
                    await pool.close();
                    console.log('üîå Baƒülantƒ± kapatƒ±ldƒ±');
                } catch (closeError) {
                    console.error('‚ö†Ô∏è  Baƒülantƒ± kapatma hatasƒ±:', closeError.message);
                }
            }
        }
    }

    async createTestTable(pool) {
        const createTableQuery = `
            IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='TestEmployees' AND xtype='U')
            CREATE TABLE TestEmployees (
                ID INT IDENTITY(1,1) PRIMARY KEY,
                Name NVARCHAR(100) NOT NULL,
                Department NVARCHAR(50),
                Salary DECIMAL(10,2),
                HireDate DATE
            )
        `;
        
        await pool.request().query(createTableQuery);
        
        // Test verisi ekle
        const insertDataQuery = `
            IF NOT EXISTS (SELECT * FROM TestEmployees)
            BEGIN
                INSERT INTO TestEmployees (Name, Department, Salary, HireDate) VALUES
                ('Ahmet Yƒ±lmaz', 'IT', 75000.00, '2020-01-15'),
                ('Ay≈üe Kaya', 'HR', 65000.00, '2019-03-20'),
                ('Mehmet Demir', 'Finance', 80000.00, '2021-06-10'),
                ('Fatma ≈ûahin', 'IT', 70000.00, '2020-11-05')
            END
        `;
        
        await pool.request().query(insertDataQuery);
    }

    async testCreateView(pool) {
        const createViewQuery = `
            IF OBJECT_ID('vw_ITEmployees', 'V') IS NOT NULL
                DROP VIEW vw_ITEmployees;
            CREATE VIEW vw_ITEmployees AS
            SELECT Name, Salary, HireDate
            FROM TestEmployees
            WHERE Department = 'IT'
        `;
        
        await pool.request().query(createViewQuery);
        
        // G√∂r√ºn√ºm√º test et
        const testViewQuery = 'SELECT * FROM vw_ITEmployees';
        const result = await pool.request().query(testViewQuery);
        console.log(`   üìã G√∂r√ºn√ºmde ${result.recordset.length} kayƒ±t bulundu`);
    }

    async testListViews(pool) {
        const listViewsQuery = `
            SELECT 
                TABLE_NAME as view_name,
                TABLE_SCHEMA as schema_name
            FROM INFORMATION_SCHEMA.VIEWS
            WHERE TABLE_NAME LIKE '%ITEmployees%'
            ORDER BY TABLE_SCHEMA, TABLE_NAME
        `;
        
        const result = await pool.request().query(listViewsQuery);
        console.log(`   üìã ${result.recordset.length} test g√∂r√ºn√ºm√º bulundu`);
        result.recordset.forEach(view => {
            console.log(`   - ${view.schema_name}.${view.view_name}`);
        });
    }

    async testCreateStoredProcedure(pool) {
        const createProcQuery = `
            IF OBJECT_ID('sp_GetEmployeesByDepartment', 'P') IS NOT NULL
                DROP PROCEDURE sp_GetEmployeesByDepartment;
            CREATE PROCEDURE sp_GetEmployeesByDepartment
                @Department NVARCHAR(50)
            AS
            BEGIN
                SELECT Name, Salary, HireDate
                FROM TestEmployees
                WHERE Department = @Department
                ORDER BY Salary DESC
            END
        `;
        
        await pool.request().query(createProcQuery);
        
        // Saklƒ± yordamƒ± test et
        const testProcQuery = 'EXEC sp_GetEmployeesByDepartment @Department = \'IT\'';
        const result = await pool.request().query(testProcQuery);
        console.log(`   üìã Saklƒ± yordam ${result.recordset.length} kayƒ±t d√∂nd√ºrd√º`);
    }

    async testListStoredProcedures(pool) {
        const listProcsQuery = `
            SELECT 
                ROUTINE_NAME as procedure_name,
                ROUTINE_SCHEMA as schema_name,
                CREATED as created_date
            FROM INFORMATION_SCHEMA.ROUTINES
            WHERE ROUTINE_TYPE = 'PROCEDURE'
            AND ROUTINE_NAME LIKE '%GetEmployeesByDepartment%'
            ORDER BY ROUTINE_SCHEMA, ROUTINE_NAME
        `;
        
        const result = await pool.request().query(listProcsQuery);
        console.log(`   üìã ${result.recordset.length} test saklƒ± yordamƒ± bulundu`);
        result.recordset.forEach(proc => {
            console.log(`   - ${proc.schema_name}.${proc.procedure_name} (${proc.created_date})`);
        });
    }

    async cleanup(pool) {
        const cleanupQueries = [
            'IF OBJECT_ID(\'vw_ITEmployees\', \'V\') IS NOT NULL DROP VIEW vw_ITEmployees',
            'IF OBJECT_ID(\'sp_GetEmployeesByDepartment\', \'P\') IS NOT NULL DROP PROCEDURE sp_GetEmployeesByDepartment',
            'IF OBJECT_ID(\'TestEmployees\', \'U\') IS NOT NULL DROP TABLE TestEmployees'
        ];
        
        for (const query of cleanupQueries) {
            try {
                await pool.request().query(query);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  Temizlik uyarƒ±sƒ±: ${error.message}`);
            }
        }
    }
}

// Test √ßalƒ±≈ütƒ±r
const tester = new NewFeaturesTest();
const success = await tester.testNewFeatures();
process.exit(success ? 0 : 1);